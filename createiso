#!/bin/bash
set -x
if which apt &>/dev/null && [[ -d /var/lib/dpkg && -d /etc/apt ]] ; then
    apt-get update
    echo "işlem başladı....."
    apt install xorriso grub-pc-bin grub-efi mtools make python3 dosfstools e2fsprogs squashfs-tools python3-yaml gcc wget curl unzip xz-utils debootstrap git erofs-utils zstd -y
fi

apt-get install git devscripts equivs -y
#------------------------------------------------------------------------------------
rootfs="/root/distro/rootfs"
distro="/root/distro"
rm -rf distro/iso
#rm -rf $rootfs
mkdir -p /tmp/distro/rootfs
mkdir -p $rootfs/bin
#mkdir -p distro/rootfs
#export PATH=/bbin:$PATH
cp busybox $rootfs/bin/busybox
cp kly $rootfs/bin/kly
cp bps $rootfs/bin/bps
cd $rootfs/bin/
ln -s busybox cpio
#busybox --install -s ./
cd $rootfs/
#cd distro/rootfs/
mkdir  -p var run dev sys proc etc tmp/kly/kur
bash -c "echo '127.0.0.1 kly' >> $rootfs/etc/hosts"
bash -c "echo 'kly' > $rootfs/etc/hostname"
bash -c "echo 'nameserver 8.8.8.8' > $rootfs/etc/resolv.conf"

### system chroot  bind/mount
for i in dev dev/pts proc sys; do mount -o bind /$i $rootfs/$i; done
### manuel kly-tools install
$rootfs/bin/busybox wget -O $rootfs/tmp/base-file-1.0.kly https://github.com/bpslinux/kly-temel-paketler/raw/refs/heads/master/base-file/base-file-1.0.kly 1>$rootfs/dev/null 2>$rootfs/dev/null
$rootfs/bin/busybox tar -xf $rootfs/tmp/base-file-1.0.kly -C $rootfs/tmp/kly/kur
$rootfs/bin/busybox tar -xf $rootfs/tmp/kly/kur/rootfs.tar.xz -C $rootfs


#paket adresi ekleniyor
$rootfs/bin/busybox mkdir -p $rootfs/etc/kly
echo "bpslinux/kly-temel-paketler">$rootfs/etc/kly/sources.list
echo "kendilinuxunuyap/kly-binary-packages">$rootfs/etc/kly/sources.list
$rootfs/bin/kly -u $rootfs
$rootfs/bin/busybox mkdir -p $rootfs/etc/bps
echo "basitdagitim/base-bps-binary-packages">$rootfs/etc/bps/sources.list
$rootfs/bin/bps -u $rootfs
#**********************************************************************
echo root:x:0:0:root:/root:/bin/sh > $rootfs/etc/passwd 
chmod 755 $rootfs/etc/passwd
#**********************************************************************

for paket in glibc readline ncurses bash openssl acl attr libcap libpcre2 gmp coreutils sqlite  \
util-linux grep sed mpfr gawk findutils libgcc libcap-ng gzip xz-utils zstd bzip2 elfutils libselinux \
tar zlib brotli curl
do
$rootfs/bin/kly -ri $paket $rootfs
#chroot $rootfs /bin/kly -ri $paket; 
done

for paket in kernel ext-lvm2 shadow pam
do
#$rootfs/bin/kly -i $paket $rootfs
chroot $rootfs /bin/kly -ri $paket; 
done

echo "kendilinuxunuyap/kly-binary-packages">$rootfs/etc/kly/sources.list
echo "bpslinux/kly-temel-paketler">$rootfs/etc/kly/sources.list
$rootfs/bin/kly -u $rootfs


for paket in \file cpio libsepol kmod audit libxcrypt libnsl libbsd libtirpc \
e2fsprogs dosfstools libxml2 expat libmd libaio popt icu iproute2 \
net-tools dhcp openrc rsync kbd xkernel dialog live-boot live-config parted busybox nano grub \
efibootmgr efivar libssh openssh initramfs-tools eudev rsync 
do
#$rootfs/bin/kly -i $paket $rootfs
chroot $rootfs /bin/kly -ri $paket; 
done
#*************************************************************************************
#*************************************************************************************


#echo "bpslinux/kly-temel-paketler">$rootfs/etc/kly/sources.list
#$rootfs/bin/kly -u $rootfs

#cd $rootfs/lib64
#ln -s ../usr/lib64/libdevmapper.so.1.02 libdevmapper.so.1.02.1
#chroot $rootfs  /sbin/ldconfig
cd $rootfs/lib64
ln -s ../usr/lib64/libdevmapper.so.1.02 libdevmapper.so.1.02.1
ln -s libdevmapper.so.1.02.1 libdevmapper.so.1.02
chroot $rootfs  /sbin/ldconfig
#*************************************************************************************
#echo "[+] $rootfs dizininin izinleri düzenleniyor..."
#chown -R root:root ${rootfs}/bin ${rootfs}/sbin ${rootfs}/usr/bin ${rootfs}/usr/sbin 	#sahibi root:root olsun
#chown -R root:root ${rootfs}/var ${rootfs}/run ${rootfs}/root	#sahibi root:root olsun
#find ${rootfs} -type d -exec chmod 755 {} \;	# Tüm dizinlere 755 ver
#chmod 600 ${rootfs}/etc/shadow etc/gshadow 2>/dev/null # Hassas dosyaları ayarla
#chmod 1777 ${rootfs}/tmp # /tmp için sticky bit
#echo "[+] $rootfs dizininden iso oluşturuluyor..."
#*************************************************************************************
chroot $rootfs useradd live -m -s /bin/sh -d /home/live
chroot $rootfs echo -e "live\nlive\n"|chroot $rootfs passwd live
for grp in users tty wheel cdrom audio dip video plugdev netdev; do
chroot $rootfs usermod -aG $grp live || true
done
sed -i "/agetty_options/d" $rootfs/etc/conf.d/agetty
echo -e "\nagetty_options=\"-l /usr/bin/login\"" >> $rootfs/etc/conf.d/agetty

#*************************************************************************************
### update-initrd
fname=$(basename $rootfs/boot/config*)
kversion=${fname:7}
mv $rootfs/boot/config* $rootfs/boot/config-$kversion
cp $rootfs/boot/config-$kversion $rootfs/etc/kernel-config

chroot $rootfs update-initramfs -u -k $kversion

#cd $rootfs/lib64
#ln -s ../usr/lib64/libdevmapper.so.1.02 libdevmapper.so.1.02.1
#chroot $rootfs  /sbin/ldconfig
		
#### system chroot umount
for dir in dev dev/pts proc sys ; do    while umount -lf -R $rootfs/$dir 2>/dev/null ; do true; done done

#************************iso *********************************
mkdir -p $distro/iso
mkdir -p $distro/iso/boot
mkdir -p $distro/iso/boot/grub
mkdir -p $distro/iso/live || true

#### Copy kernel and initramfs (Debian/Devuan)
cp -pf $rootfs/boot/initrd.img-* $distro/iso/boot/initrd.img
cp -pf $rootfs/boot/vmlinuz-* $distro/iso/boot/vmlinuz
rm -rf $rootfs/boot
#### Create squashfs
#exit 0
mksquashfs $rootfs $distro/filesystem.squashfs -comp xz -wildcards
mv $distro/filesystem.squashfs $distro/iso/live/filesystem.squashfs

# grub.cfg dosyasını yaz
cat << EOF > "$distro/iso/boot/grub/grub.cfg"
set timeout=6; set default=1; terminal_input console;
menuentry "Canli(live) GNU/Linux 64-bit" --class liveiso {
linux /boot/vmlinuz boot=live init=/sbin/openrc-init net.ifnames=0 \
biosdevname=0
initrd /boot/initrd.img
}
menuentry "Kur GNU/Linux 64-bit" --class liveiso {
linux /boot/vmlinuz boot=live init=/bin/kur quiet
initrd /boot/initrd.img
}
EOF

#iso oluşturuluyor
grub-mkrescue $distro/iso/ -o $distro/distro.iso

